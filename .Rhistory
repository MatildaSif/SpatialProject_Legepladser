addPolygons(fillColor = ~pal(child_population),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Child Population:", child_population)) %>%
addLegend(pal = pal, values = ~child_population, opacity = 0.5,
title = "Child Population",
position = "bottomright") %>%
# add isochrones
addPolygons(data = driving_isos,
fillColor = "purple",
fillOpacity = 0.6,
stroke = FALSE) %>%
addPolygons(data = cycling_isos,
fillColor = "dodgerblue",
fillOpacity = 0.6,
stroke = FALSE) %>%
addPolygons(data = walking_isos,
fillColor = "deeppink",
fillOpacity = 0.6,
stroke = FALSE) %>%
# add playground markers
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 1)
cycling_isos <- mb_isochrone(
playgrounds,
profile = "cycling",
time = 10,
id = "adresse"
)
# Plot with isochrones
pal <- colorBin(palette = "OrRd", domain = muni_population$child_population, bins = 8)
leaflet(muni_population) %>%
addProviderTiles("CartoDB.Positron") %>%
# add population
addPolygons(fillColor = ~pal(child_population),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Child Population:", child_population)) %>%
addLegend(pal = pal, values = ~child_population, opacity = 0.5,
title = "Child Population",
position = "bottomright") %>%
# add isochrones
# addPolygons(data = driving_isos,
#             fillColor = "purple",
#             fillOpacity = 0.6,
#             stroke = FALSE) %>%
addPolygons(data = cycling_isos,
fillColor = "dodgerblue",
fillOpacity = 0.6,
stroke = FALSE) %>%
addPolygons(data = walking_isos,
fillColor = "deeppink",
fillOpacity = 0.6,
stroke = FALSE) %>%
# add playground markers
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 1)
leaflet(muni_population) %>%
addProviderTiles("CartoDB.Positron") %>%
# add population
addPolygons(fillColor = ~pal(child_population),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Child Population:", child_population)) %>%
addLegend(pal = pal, values = ~child_population, opacity = 0.5,
title = "Child Population",
position = "bottomright") %>%
# add isochrones
# addPolygons(data = driving_isos,
#             fillColor = "purple",
#             fillOpacity = 0.6,
#             stroke = FALSE) %>%
addPolygons(data = cycling_isos,
fillColor = "dodgerblue",
fillOpacity = 0.5,
stroke = FALSE) %>%
addPolygons(data = walking_isos,
fillColor = "deeppink",
fillOpacity = 0.5,
stroke = FALSE) %>%
# add playground markers
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 1)
# Calculate area in square kilometers
muni_area <- muni %>%
mutate(area_km2 = as.numeric(st_area(geometry)) / 10^6)
# View result
muni_area %>%
select(municipality, area_km2)
# View result
muni_area %>%
dplyr::select(municipality, area_km2)
View(muni)
# View result
muni_area %>%
dplyr::select(NAME_2, area_km2)
# Calculate area in square kilometers
muni_area <- muni %>%
mutate(area_km2 = as.numeric(st_area(geometry)) / 10^6) %>%
dplyr::select(NAME_2, area_km2, geometry)
# View result
muni_area
# View result
muni_areahead(muni_area)
# Calculate area in square kilometers
muni_area <- muni %>%
mutate(area_km2 = as.numeric(st_area(geometry)) / 10^6) %>%
st_transform(4326) %>%
dplyr::select(NAME_2, area_km2, geometry)
# View result
muni_areahead(muni_area)
# View resulhead(muni_area)
```
# View result
head(muni_area)
# View result
head(muni_area)
View(muni_area)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(leaflet)
library(geodata)
library(terra)
library(raster)
# Load Playground data
aar <- st_read("data/Aarhus_legepladser.geojson")
frb <- st_read("data/Frederiksberg_legepladser.geojson")
kbh<- st_read("data/København_legepladser.geojson")
rks <- st_read("data/RingkobingSkjern_legepladser.geojson")
sb <- st_read("data/Silkeborg_legepladser.geojson") # sb is a more than just playgrounds - need to filter
vhl <- st_read("data/Vesthimmerland_legepladser.geojson")
head(aar)
head(frb)
head(kbh)
head(rks)
head(sb) # filter for facilitet_type
head(vhl)
# check all different values in facilitet_type column for Silkeborg data
unique(sb$FACILITET_TYPE)
# filter so only "Legeplads" are remaining
sb <- sb %>%  filter(FACILITET_TYPE == "Legeplads")
unique(sb$FACILITET_TYPE)
# check crs
st_crs(aar)
st_crs(frb)
st_crs(kbh)
st_crs(rks)
st_crs(sb)
st_crs(vhl)
# use st_transform
aar <- st_transform(aar, 4326)
frb <- st_transform(frb, 4326)
kbh <- st_transform(kbh, 4326)
rks <- st_transform(rks, 4326)
sb <- st_transform(sb, 4326)
vhl <- st_transform(vhl, 4326)
# Collate playgrounds into one map
## Select vital columns
aar <- aar %>% dplyr::select(geometry, adresse)
frb <- frb %>% dplyr::select(geometry, navn)
kbh <- kbh %>% dplyr::select(geometry, adressebeskrivelse)
rks <- rks %>% dplyr::select(geometry, LEVERANDOR)
sb <- sb %>% dplyr::select(geometry, VEJNAVN)
vhl <- vhl %>% dplyr::select(geometry, Adresse)
## add column name with municipality
aar <- aar %>% mutate(municipality = "Aarhus")
frb <- frb %>% mutate(municipality = "Frederiksberg")
kbh <- kbh %>% mutate(municipality = "København")
rks <- rks %>% mutate(municipality = "Ringkøbing-Skjern")
sb <- sb %>% mutate(municipality = "Silkeborg")
vhl <- vhl %>% mutate(municipality = "Vesthimmerland")
## Rename columns to be the same
aar <- aar %>% rename(adresse = adresse)
frb <- frb %>% rename(adresse = navn)
kbh <- kbh %>% rename(adresse = adressebeskrivelse)
rks <- rks %>% rename(adresse = LEVERANDOR)
sb <- sb %>% rename(adresse = VEJNAVN)
vhl <- vhl %>% rename(adresse = Adresse)
# get centroids of multipolygons and multipoints
aar <- aar %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
sb <- st_make_valid(sb)
sb <- sb %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
frb <- frb %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
kbh <- kbh %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
## Combine all dataframes into one
playgrounds <- rbind(aar, frb, kbh, rks, sb, vhl)
playgrounds <- st_cast(playgrounds, "POINT")
table(st_geometry_type(playgrounds))
# create longitude and latitude columns based on point geometry
playgrounds <- playgrounds %>%
mutate(longitude = st_coordinates(geometry)[,1],
latitude = st_coordinates(geometry)[,2])
# create a leaflet map with markers using longitude and latitude, add markers with muncipality.
leaflet(playgrounds) %>%
addTiles() %>%
setView(lng = 10.2, lat = 56.2, zoom = 7) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality))
# Load Municipality income data
income <- read.csv("data/income.csv")
income$municipality <- gsub("-", " ", income$municipality)
# Load population data of children from 0-14 years old
population <- read.csv("data/Child014_Population.csv")
population$municipality <- gsub("-", " ", population$municipality)
population$municipality <- gsub("æ", "ae", population$municipality)
population$municipality <- gsub("Æ", "Ae", population$municipality)
population$municipality <- gsub("ø", "oe", population$municipality)
population$municipality <- gsub("å", "aa", population$municipality)
population$municipality <- gsub("Å", "Aa", population$municipality)
population$municipality <- gsub("-", " ", population$municipality)
# Load Municipality boundries data
gadm(country = "DNK", path = "data", level = 2, version="latest")
muni <- readRDS("data/gadm/gadm41_DNK_2_pk.rds")
class(muni)
# convert vector to sf
muni <- st_as_sf(muni)
# transform crs
muni <- st_transform(muni, crs = 4326)
# check column names
names(muni)
head(muni) # The column with municipality names is NAME_2
# recode the danish letters to match with csv files
muni$NAME_2 <- gsub("æ", "ae", muni$NAME_2)
muni$NAME_2 <- gsub("Æ", "Ae", muni$NAME_2)
muni$NAME_2 <- gsub("ø", "oe", muni$NAME_2)
muni$NAME_2 <- gsub("å", "aa", muni$NAME_2)
muni$NAME_2 <- gsub("Å", "Aa", muni$NAME_2)
muni$NAME_2 <- gsub("-", " ", muni$NAME_2)
# plot
leaflet() %>%
addTiles() %>%
addPolygons(data = muni, color = "blue", weight = 1, fillOpacity = 0.01)
# Join income data with sf municipalities object
muni_income <- muni %>%
left_join(income, by = c("NAME_2" = "municipality"))
muni_income <- muni_income %>%
rename("municipality" = "NAME_2") %>%
dplyr::select(municipality, geometry, income)
# plot
pal <- colorBin(palette = "OrRd", domain = muni_income$income, bins = 8)
leaflet(muni_income) %>%
addProviderTiles("CartoDB.Positron") %>%
# add income
addPolygons(fillColor = ~pal(income),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Income:", income)) %>%
addLegend(pal = pal, values = ~income, opacity = 0.7,
title = "Income",
position = "bottomright") %>%
# add playgrounds
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 0.5)
# Join population data with sf municipalities object
muni_population <- muni %>%
left_join(population, by = c("NAME_2" = "municipality"))
muni_population <- muni_population %>%
rename("municipality" = "NAME_2") %>%
dplyr::select(municipality, geometry, child_population) %>%
mutate(population = as.numeric(gsub(" ", "", child_population)))
# plot
pal <- colorBin(palette = "OrRd", domain = muni_population$child_population, bins = 8)
leaflet(muni_population) %>%
addProviderTiles("CartoDB.Positron") %>%
# add population
addPolygons(fillColor = ~pal(child_population),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Child Population:", child_population)) %>%
addLegend(pal = pal, values = ~child_population, opacity = 0.7,
title = "Child Population",
position = "bottomright") %>%
# add playgrounds
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 0.5)
my_token <- "pk.eyJ1IjoibWF0aWxkYXNpZiIsImEiOiJjbTl2MzF0NWowZGdvMmpyMmxjbDRmZTA3In0.cELeKMY07SV3Z37zMLBIOQ"
library(mapboxapi)
mb_access_token(my_token, install = TRUE, overwrite = TRUE)
# Use playgrounds df as the data focus sf object
playgrounds <- st_as_sf(playgrounds, coords = c("longitude", "latitude"), crs = 4326)
# Walking range 20 mins
walking_isos <- mb_isochrone(
playgrounds,
profile = "walking",
time = 5,
id = "adresse"
)
cycling_isos <- mb_isochrone(
playgrounds,
profile = "cycling",
time = 10,
id = "adresse"
)
driving_isos <- mb_isochrone(
playgrounds,
profile = "driving",
time = 5,
id = "adresse"
)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(leaflet)
library(geodata)
library(terra)
library(raster)
# Load Playground data
aar <- st_read("data/Aarhus_legepladser.geojson")
frb <- st_read("data/Frederiksberg_legepladser.geojson")
kbh<- st_read("data/København_legepladser.geojson")
rks <- st_read("data/RingkobingSkjern_legepladser.geojson")
sb <- st_read("data/Silkeborg_legepladser.geojson") # sb is a more than just playgrounds - need to filter
vhl <- st_read("data/Vesthimmerland_legepladser.geojson")
head(aar)
head(frb)
head(kbh)
head(rks)
head(sb) # filter for facilitet_type
head(vhl)
# check all different values in facilitet_type column for Silkeborg data
unique(sb$FACILITET_TYPE)
# filter so only "Legeplads" are remaining
sb <- sb %>%  filter(FACILITET_TYPE == "Legeplads")
unique(sb$FACILITET_TYPE)
# check crs
st_crs(aar)
st_crs(frb)
st_crs(kbh)
st_crs(rks)
st_crs(sb)
st_crs(vhl)
# use st_transform
aar <- st_transform(aar, 4326)
frb <- st_transform(frb, 4326)
kbh <- st_transform(kbh, 4326)
rks <- st_transform(rks, 4326)
sb <- st_transform(sb, 4326)
vhl <- st_transform(vhl, 4326)
# Collate playgrounds into one map
## Select vital columns
aar <- aar %>% dplyr::select(geometry, adresse)
frb <- frb %>% dplyr::select(geometry, navn)
kbh <- kbh %>% dplyr::select(geometry, adressebeskrivelse)
rks <- rks %>% dplyr::select(geometry, LEVERANDOR)
sb <- sb %>% dplyr::select(geometry, VEJNAVN)
vhl <- vhl %>% dplyr::select(geometry, Adresse)
## add column name with municipality
aar <- aar %>% mutate(municipality = "Aarhus")
frb <- frb %>% mutate(municipality = "Frederiksberg")
kbh <- kbh %>% mutate(municipality = "København")
rks <- rks %>% mutate(municipality = "Ringkøbing-Skjern")
sb <- sb %>% mutate(municipality = "Silkeborg")
vhl <- vhl %>% mutate(municipality = "Vesthimmerland")
## Rename columns to be the same
aar <- aar %>% rename(adresse = adresse)
frb <- frb %>% rename(adresse = navn)
kbh <- kbh %>% rename(adresse = adressebeskrivelse)
rks <- rks %>% rename(adresse = LEVERANDOR)
sb <- sb %>% rename(adresse = VEJNAVN)
vhl <- vhl %>% rename(adresse = Adresse)
# get centroids of multipolygons and multipoints
aar <- aar %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
sb <- st_make_valid(sb)
sb <- sb %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
frb <- frb %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
kbh <- kbh %>%
mutate(geometry = st_centroid(geometry)) %>%
st_set_geometry("geometry")
## Combine all dataframes into one
playgrounds <- rbind(aar, frb, kbh, rks, sb, vhl)
playgrounds <- st_cast(playgrounds, "POINT")
table(st_geometry_type(playgrounds))
# create longitude and latitude columns based on point geometry
playgrounds <- playgrounds %>%
mutate(longitude = st_coordinates(geometry)[,1],
latitude = st_coordinates(geometry)[,2])
# create a leaflet map with markers using longitude and latitude, add markers with muncipality.
leaflet(playgrounds) %>%
addTiles() %>%
setView(lng = 10.2, lat = 56.2, zoom = 7) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality))
# Load Municipality income data
income <- read.csv("data/income.csv")
income$municipality <- gsub("-", " ", income$municipality)
# Load population data of children from 0-14 years old
population <- read.csv("data/Child014_Population.csv")
population$municipality <- gsub("-", " ", population$municipality)
population$municipality <- gsub("æ", "ae", population$municipality)
population$municipality <- gsub("Æ", "Ae", population$municipality)
population$municipality <- gsub("ø", "oe", population$municipality)
population$municipality <- gsub("å", "aa", population$municipality)
population$municipality <- gsub("Å", "Aa", population$municipality)
population$municipality <- gsub("-", " ", population$municipality)
# Load Municipality boundries data
gadm(country = "DNK", path = "data", level = 2, version="latest")
muni <- readRDS("data/gadm/gadm41_DNK_2_pk.rds")
class(muni)
# convert vector to sf
muni <- st_as_sf(muni)
# transform crs
muni <- st_transform(muni, crs = 4326)
# check column names
names(muni)
head(muni) # The column with municipality names is NAME_2
# recode the danish letters to match with csv files
muni$NAME_2 <- gsub("æ", "ae", muni$NAME_2)
muni$NAME_2 <- gsub("Æ", "Ae", muni$NAME_2)
muni$NAME_2 <- gsub("ø", "oe", muni$NAME_2)
muni$NAME_2 <- gsub("å", "aa", muni$NAME_2)
muni$NAME_2 <- gsub("Å", "Aa", muni$NAME_2)
muni$NAME_2 <- gsub("-", " ", muni$NAME_2)
# plot
leaflet() %>%
addTiles() %>%
addPolygons(data = muni, color = "blue", weight = 1, fillOpacity = 0.01)
# Join income data with sf municipalities object
muni_income <- muni %>%
left_join(income, by = c("NAME_2" = "municipality"))
muni_income <- muni_income %>%
rename("municipality" = "NAME_2") %>%
dplyr::select(municipality, geometry, income)
# plot
pal <- colorBin(palette = "OrRd", domain = muni_income$income, bins = 8)
leaflet(muni_income) %>%
addProviderTiles("CartoDB.Positron") %>%
# add income
addPolygons(fillColor = ~pal(income),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Income:", income)) %>%
addLegend(pal = pal, values = ~income, opacity = 0.7,
title = "Income",
position = "bottomright") %>%
# add playgrounds
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 0.5)
# Join population data with sf municipalities object
muni_population <- muni %>%
left_join(population, by = c("NAME_2" = "municipality"))
muni_population <- muni_population %>%
rename("municipality" = "NAME_2") %>%
dplyr::select(municipality, geometry, child_population) %>%
mutate(population = as.numeric(gsub(" ", "", child_population)))
# plot
pal <- colorBin(palette = "OrRd", domain = muni_population$child_population, bins = 8)
leaflet(muni_population) %>%
addProviderTiles("CartoDB.Positron") %>%
# add population
addPolygons(fillColor = ~pal(child_population),
color = "#444444",
weight = 1,
fillOpacity = 0.5,
popup = ~paste(municipality, "<br>Child Population:", child_population)) %>%
addLegend(pal = pal, values = ~child_population, opacity = 0.7,
title = "Child Population",
position = "bottomright") %>%
# add playgrounds
addCircleMarkers(data = playgrounds, lng = ~longitude, lat = ~latitude, radius = 0.5,
label = ~paste(municipality),
color = "darkblue", fillOpacity = 0.5)
my_token <- "pk.eyJ1IjoibWF0aWxkYXNpZiIsImEiOiJjbTl2MzF0NWowZGdvMmpyMmxjbDRmZTA3In0.cELeKMY07SV3Z37zMLBIOQ"
library(mapboxapi)
mb_access_token(my_token, install = TRUE, overwrite = TRUE)
# Use playgrounds df as the data focus sf object
playgrounds <- st_as_sf(playgrounds, coords = c("longitude", "latitude"), crs = 4326)
# Walking range 20 mins
walking_isos <- mb_isochrone(
playgrounds,
profile = "walking",
time = 5,
id = "adresse"
)
cycling_isos <- mb_isochrone(
playgrounds,
profile = "cycling",
time = 10,
id = "adresse"
)
driving_isos <- mb_isochrone(
playgrounds,
profile = "driving",
time = 5,
id = "adresse"
)
